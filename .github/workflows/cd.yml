name: CD

on:
  workflow_dispatch:
  workflow_call:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_KEY }}
          aws-region: ap-northeast-2

      - name: Get EC2 deployment parameters from SSM
        uses: dkershner6/aws-ssm-getparameters-action@v2.0.3
        id: ssm
        with:
          parameterPairs: |
            /ci/ec2/host = EC2_HOST,
            /ci/ec2/user = EC2_USER,
            /ci/ec2/private_key = EC2_PRIVATE_KEY,
            /ci/ec2/ssh_port = EC2_SSH_PORT
          withDecryption: "true"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_PRIVATE_KEY }}
          port: ${{ env.EC2_SSH_PORT }}
          script: |
            echo "🚀 Starting deployment..."

            # Create and navigate to project directory
            mkdir -p /home/ubuntu/depromeet
            cd /home/ubuntu/depromeet

            # Initialize git repository if not exists
            if [ ! -d ".git" ]; then
              echo "📋 Initializing git repository..."
              git clone https://github.com/depromeet/17-5-Repo.git .
              echo "✅ Repository cloned"
            fi

            # (선택) 현재 JAR 백업
            if [ -f "stock-diary/build/libs/stock-diary-0.0.1-SNAPSHOT.jar" ]; then
              echo "📦 Backing up current JAR..."
              cp stock-diary/build/libs/stock-diary-0.0.1-SNAPSHOT.jar stock-diary-backup-$(date +%Y%m%d_%H%M%S).jar || true
            fi

            # Update code from repository (현재 체크아웃된 브랜치 그대로)
            echo "📥 Pulling latest code for current branch..."
            CUR_BRANCH="$(git rev-parse --abbrev-ref HEAD)" || { echo "❌ Not a git repo"; exit 1; }
            if [ "$CUR_BRANCH" = "HEAD" ]; then
              echo "❌ Detached HEAD 상태입니다. 브랜치가 필요합니다."
              exit 1
            fi
            echo "🔎 Current branch: $CUR_BRANCH"
            git fetch --prune origin
            # 로컬 변경을 덮어쓰지 않도록 fast-forward만 허용
            git pull --ff-only origin "$CUR_BRANCH" || {
              echo "❌ Fast-forward 불가(로컬 변경/이력 차이). 수동 조치 필요."; exit 1;
            }

            # Stop existing application (if running) - skip for now to avoid SSH issues
            echo "⏹️  Checking for existing application..."
            if pgrep -f "stock-diary-0.0.1-SNAPSHOT.jar" > /dev/null; then
              echo "📋 Found running application, will be replaced after build"
            else
              echo "📋 No running application found"
            fi

            # Build the application
            echo "🔨 Building application..."
            chmod +x ./gradlew || true
            ./gradlew :stock-diary:build -x test --no-daemon

            # Verify build success
            JAR_PATH="stock-diary/build/libs/stock-diary-0.0.1-SNAPSHOT.jar"
            if [ ! -f "$JAR_PATH" ]; then
              echo "❌ Build failed - JAR not found at $JAR_PATH"
              exit 1
            fi
            echo "✅ Build successful - JAR found"
            ls -la stock-diary/build/libs/ || true

            # Start the application
            echo "🚀 Starting new application..."
            [ -f app.log ] && mv app.log "app_$(date +%Y%m%d_%H%M%S).log" || true
            nohup java -jar "$JAR_PATH" > app.log 2>&1 &

            # Wait a moment and check if application started
            sleep 5
            if pgrep -f "stock-diary-0.0.1-SNAPSHOT.jar" > /dev/null; then
              APP_PID="$(pgrep -f "stock-diary-0.0.1-SNAPSHOT.jar" | head -n1 || true)"
              echo "✅ Application started successfully (pid=$APP_PID)"
              [ -n "$APP_PID" ] && ps -o pid,ppid,etime,cmd -p "$APP_PID" || true
            else
              echo "❌ Application failed to start"
              echo "📋 Recent logs:"
              tail -100 app.log || true
              exit 1
            fi

            echo "🎉 Deployment completed successfully!"